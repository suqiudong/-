import React, { Component } from 'react';
import DateRangePicker from 'COMPONENT/Common/DateRangePicker/DateRangePicker';
import moment from 'moment';
import jsPlumb from 'jsPlumb';
import createList from 'UTIL/baseList';
import { error} from 'UTIL/notification';
import {encodeSMS4} from 'UTIL/sm4';
import createSelect from 'UTIL/baseSelect2';
import dataSourceModelService from 'SERVICE/dataSourceModelService'

const key = '2C023A86BD32812A4C180A7152EEBF0A';
var defaultData = {
    animate: true,
    data: [{
        text: '数据源',
        children: []
    }]
};
var instance;
var appen = [];
var table1Select = {};
var table2Select = {};
var sourceTable = '';
var targetTable = '';
var linkType = 'innerJoin';
var isModifyFlag = false;
var tableModel = {
    tableContent: '',
    links: [],
    tables: [],
    columns: [],
    moveTable: [],
    model: [],
    colName: []
};
// 数据库类型
var valueType = ['tinyint', 'int', 'integer', 'float', 'double', 'smallint']; // 数值类型
var dateType = ['time', 'date', 'timestamp', 'datetime']; // 日期类型
var stringType = ['char', 'varchar']; // 字符串类型
 var dataBaseType = [{valueType: valueType}, {dateType: dateType}, {stringType: stringType}];
export default class DataSourceModelAdd extends Component {
    constructor(props) {
        super(props);
        this.createdataViewList = this.createdataViewList.bind(this);
        this.readTabel = this.readTabel.bind(this);
        this.tableData = this.tableData.bind(this);
        this.draggable = this.draggable.bind(this);
        this.jsPlumbMove = this.jsPlumbMove.bind(this);
        this.initJsPlumbTable = this.initJsPlumbTable.bind(this);
        this.OffsetField = this.OffsetField.bind(this);
        this.deleteModel = this.deleteModel.bind(this);
        this.findLinks = this.findLinks.bind(this);
        this.showLinkModal = this.showLinkModal.bind(this);
        this.closeModal = this.closeModal.bind(this);
        this.AssociationConfiguration = this.AssociationConfiguration.bind(this);
        this.addFields = this.addFields.bind(this);
        this.TemplateSelect = this.TemplateSelect.bind(this);
        this.addSelectTable = this.addSelectTable.bind(this);
        this.addOrUpdateLink = this.addOrUpdateLink.bind(this);
        this.strategyChange = this.strategyChange.bind(this);
        this.creatSql = this.creatSql.bind(this);
        this.ResultSet = this.ResultSet.bind(this);
        this.columnSelect = this.columnSelect.bind(this);
        this.colNameSave = this.colNameSave.bind(this);
        this.saveModel = this.saveModel.bind(this);
        this.state = {
        }
    }
    componentWillMount() {
        // 获取数据源列表
        this.props.readDataSource();
        // 禁止右键点击
        document.oncontextmenu = ()=> false;
    }
    componentDidUpdate() {
        // tree数据节点
        let that = this;
        let deNodes = defaultData.data[0].children;
        // 插入获取的数据源
        this.props.dataSourceModel.dataSourceModelList.map((dataName, i)=> {
            // 防止页面重新渲染再次添加
            if (deNodes.length <= i) {
                deNodes.push({
                    text: dataName.dataSourceName,
                    children: [],
                    id: i
                });

            }
        });
        // 生成二级tree
        $(' #tree').tree(defaultData);

        $(' #tree').tree({
            onClick: function (node) {
                if (node != null) {
                    $(' #tree').tree('toggle', node.target);
                    if (node.table) {

                        node.table.map(function (data) {
                            tableModel.model.push(data);
                        });
                    }
                }
                // 添加拖拽
                that.draggable();
            },
            onSelect(node) {
                // 判断点击是否生成tree
                if (node.table)that.tableData(node.table, node.text);
                if (node.children) {
                    if (node.children.length <= 0) {
                        that.readTabel(node, deNodes);
                    } else {
                        return;
                    }
                }
            }
        });
        ;

        // 生成表单
        this.tableData();

        // jsplumb初始化
        this.jsPlumbMove();

        // 清空canvas
        $('#canvas').html('');

    }
    // 生成结果集
    createdataViewList(data, keys) {

        // 构造列表配置项
        let tableConfig = {};
        let columns = [];
        for (let i = 0; i < keys.length; i++) {
            columns.push({data: keys[i], 'defaultContent': '-'});
        }
        tableConfig.id = 'dataViewList';
        tableConfig.columns = columns;
        tableConfig.scrollX = true;
        // 获取列表内数据列
        tableConfig.data = data;
        // 生成列表
        createList(tableConfig);
    }
    // 生成三级tree
    readTabel(node, deNodes) {

        // 点击二级tree发送请求获取DataSourceTabel
        let dataSource = {
            dataSourceName: node.text,
            offset: 1,
            num: 10000,
            tableNameFilter: ''
        };
        (async () => {
            let DataSourceDetail = await dataSourceModelService.getDataSource(dataSource);
            if (DataSourceDetail) {
                let DataSourceTabel = DataSourceDetail.schemaModule;
                appen = [];
                for (let key in DataSourceTabel) {
                    DataSourceTabel[key].map(function(data) {
                        data.dataSourceName = DataSourceDetail.dataSourceName;
                        data.owner = DataSourceDetail.owner;
                        data.dataBaseName = key;
                        data.dataSourceType = DataSourceDetail.dataSourceType;
                        data.connectionConfig = DataSourceDetail.connectionConfig;
                        tableModel.tables.push(data);
                    });
                    appen.push({
                        text: key,
                        table: DataSourceTabel[key],
                        [key]: DataSourceTabel[key]
                    })
                }
                // 把数据添加defaultData中；
                for (let key in deNodes) {
                    if (deNodes[key].text == node.text) {
                        deNodes[key].children = appen;
                    }
                }
                // 重新生成tree
                $(' #tree').tree(defaultData);
            }
        })();
        // this.props.getDataSourceTabel(dataSource);
        // let dataSourceModel = this.props.dataSourceModel.DataSourceTabel;
    }

    // 点击三级tree生成table
    tableData(data, node) {
        data = data || [{table: ''}];
        // 构造列表配置项
        let tableConfig = {};
        tableConfig.id = 'tableData';
        tableConfig.scrollX = false;
        tableConfig.columns = [
            {data: 'tableName',
             render(data) {
                 // 如果传入的值为空，返回，不为空数据表名添加一起
                if (data == undefined || node == undefined) {
                    return ;
                } else {
                    let tableName = node + '.' + data;
                    // return tableName;
                    return '<p tableId=' + tableName + '>' + tableName + '</p>';
                }
             },
              'defaultContent': '-'}
        ];
        tableConfig.order = [[0, 'desc']];
        // 获取列表内数据列
        tableConfig.data = data;
        // 生成列表
        createList(tableConfig);
    }
    // 拖拽事件
    draggable() {
         let that = this;
        // 拖拽
        $(' .sorting_1').draggable({
            proxy: function(source) {
                /* 创建移动块，从这个class可以获得移动块的坐标*/
                var moveBlock = $('<div class="proxy"></div>');
                moveBlock.html($(source).html()).appendTo('body');
                return moveBlock;
            },
            revert: true,
            cursor: 'auto'
        });
        // 放入框内
        $('.flowchart-demo').droppable({
            onDrop: function(e, source) {
                // 获取拖动div坐标
                let moveX = $(' .proxy').offset().left - $(this).offset().left;
                let moveY = $(' .proxy').offset().top - $(this).offset().top;
                let tableId = source.childNodes[0].getAttribute('tableId');
                let ID = tableId.split('.');
                // 创建div
                let p = $('<div data_source="' + ID[0] + '" tableName= "' + tableId + '" style="width: inherit;min-width:180px;left:' + moveX + 'px;top:' + moveY + 'px"' + 'class="window jtk-node" tableId=' + tableId + ' id=' + ID[ID.length - 1] + '></div>');
                p.append($('<div class="eq"></div>'));
                p.append($('<p>' + source.childNodes[0].innerHTML + '</p>'));
                // 防止新添加重复
                let flag = false;
                $('.flowchart-demo .window').each(function() {
                    if ($(this).attr('tableId') == tableId) {
                        flag = true;
                    }
                });
                if (flag) return;

                // 新加一个拖动对象
                $(this).append(p);

                for (let k in tableModel.tables) {
                    if (tableModel.tables[k].tableName == ID[ID.length - 1]) {
                        tableModel.tables[k].Id = tableId;
                        tableModel.moveTable.push(tableModel.tables[k]);
                        for (let key in tableModel.tables[k].columns) {
                            tableModel.columns.push({
                                columns: key,
                                table: tableId,
                                tableCloumn: key
                            });
                        }
                    }
                }
                // 删除事件
                that.deleteModel('#' + ID[ID.length - 1]);

               // 连接线
                that.initJsPlumbTable(ID[ID.length - 1]);

                // 偏移字符
                that.OffsetField();
            }
        });
    }
    // 偏移字符
    OffsetField() {
        let OffsetField;
        $(' #offsetColumn').empty();
        for (let i = 0; i < tableModel.moveTable.length; i++) {
            let optgroup = $('<optgroup label="' + tableModel.moveTable[i].Id + '"></optgroup>');
            OffsetField = Object.getOwnPropertyNames(tableModel.moveTable[i].columns);
            OffsetField.map(function(data) {
                optgroup.append($('<option value="' + data + '"> ' + data + '</option>'));
            });
            $(' #offsetColumn').append(optgroup);
        }
        createSelect({
            id: 'offsetColumn',
            minimumResultsForSearch: 2
        });
    }
    // 移除事件
    deleteModel(id) {
        // 绑定点击右键删除事件
        let oThis = this;
        $(id).on('contextmenu', function (e) {
            let that = $(this);
            let oX = e.clientX - $('.flowchart-demo').offset().left;
            let oY = e.clientY - $('.flowchart-demo').offset().top;
            $(' #delete_dom').css({
                display: 'block',
                top: oY + 'px',
                left: oX + 'px'
            }).on('click', function(e) {
                e.stopPropagation();
                $(this).css({display: 'none'});
                tableModel.links.map(function(data, i) {
                    if (that.attr('tableId') == data.sourceTableName || that.attr('tableId') == data.targetTableName) {
                        tableModel.links.splice(i, 1);
                    }
                });
                // 清楚tableModel.moveTable中删除数据
                tableModel.moveTable.map(function(data, i) {
                    if (that.attr('tableId') == data.Id) {
                        tableModel.moveTable.splice(i, 1);
                    }
                });
                instance.remove(that);
                jsPlumb.detach(that);
                oThis.OffsetField();
                tableModel.sql = '';
            });
            $(this).mousedown(()=>$(' #delete_dom').css({display: 'none'}));
            document.addEventListener('click', function() {
                $(' #delete_dom').css({display: 'none'});
            }, true);
        });
    }
    // jsPlumb初始化
    jsPlumbMove() {
       // let that = this;
       instance = jsPlumb.getInstance({
                DragOptions: {
                    cursor: 'pointer',
                    zIndex: 2000
                },
                Endpoint: ['Dot', {radius: 2}],
                Connector: 'StateMachine',
                ConnectionOverlays: [
                    ['Arrow', {
                        location: 1,
                        visible: true,
                        width: 11,
                        length: 11
                    }],
                    ['Label', {
                        label: '<span class="glyphicon glyphicon-refresh" style="cursor: pointer;"></span>',
                        id: 'label',
                        cssClass: 'aLabel'
                        }
                    ]
                ],
                ConnectionsDetachable: false,
                Container: 'canvas'
            });
        instance.registerConnectionType('basic', {
            anchor: 'Continuous',
            connector: 'StateMachine'
        });
        // 点击右键删除
        instance.bind('contextmenu', function(p) {
            tableModel.links.map(function(data, i) {
                if (p.id == data.connectionId) {
                    tableModel.links.splice(i, 1);
                }
            });
            jsPlumb.detach(p);
        });
        //
        instance.bind('click', (p)=> {
            let sourceId = p.sourceId;
            let targetId = p.targetId;
            let link = this.findLinks(sourceId, targetId);
            this.showLinkModal(sourceId, targetId, link);
        });
        instance.bind('connection', function(p) {
            // 判断是否连接自己
            if (p.connection.sourceId == p.connection.targetId) {
                jsPlumb.detach(p);
                return;
            }
            // 获取源元素
            var source = p.source;
            // 获取源元素上的点
            var sourceEndPoints = instance.getEndpoints(source);
            $.each(sourceEndPoints, function(i, sourceEndPoint) {
                // 判断是否重复连接
                if (p.connection != sourceEndPoint.connections[0]
                    && (sourceEndPoint.connections[0].targetId == p.targetId)) {
                    jsPlumb.detach(p);
                    return;
                }
                // 判断是否环形连接
                if (sourceEndPoint.connections[0].sourceId == p.targetId
                    && sourceEndPoint.connections[0].targetId == p.sourceId) {
                    instance.detach(p);
                    return;
                }
            });
            // 添加连接线属性到tableModel
            if (!isModifyFlag) {
                tableModel.links.push({
                    connectionId: p.connection.id,
                    sourceId: p.connection.sourceId,
                    sourceTableName: $('#' + p.connection.sourceId).attr('tableName'),
                    targetId: p.connection.targetId,
                    targetTableName: $('#' + p.connection.targetId).attr('tableName'),
                    type: 'innerJoin',
                    columns: []
                });
            }
        });
    }
    // 查询联动的对象
  findLinks(sourceId, targetId) {
        var linkx;
        $.each(tableModel.links, function(k, link) {
            if ((link.sourceId == sourceId && link.targetId == targetId)
                || (link.sourceId == targetId && link.targetId == sourceId)) {
                linkx = link;
            }
        });
        return linkx;
    }
    showLinkModal(sourceId, targetId, link) {
        sourceTable = sourceId;
        targetTable = targetId;
        // 查询出两张表的下拉列
        let dataSourceTableId = $('#' + sourceId).attr('data_source');
        let dataTargetTableId = $('#' + targetId).attr('data_source');
        for (let i in appen) {
            if (appen[i].text == dataSourceTableId) {
                let data = appen[i][dataSourceTableId];
                for (let k in data) {
                    if (data[k].tableName == sourceId) {
                        table1Select = data[k];

                    }
                }
            }
            if (appen[i].text == dataTargetTableId) {
                let data = appen[i][dataTargetTableId];
                for (let k in data) {
                    if (data[k].tableName == targetId) {
                        table2Select = data[k];
                    }
                }
            }
        }
        let links = this.findLinks(sourceId, targetId);
        this.addFields(links);
    }
    closeModal() {
        $(' #linkModal').modal('hide');
    }
    // 创建连接线
    initJsPlumbTable(id) {
        var el = jsPlumb.getSelector('#' + id);
        instance.draggable(el, {
        });
        instance.makeSource(el, {
            filter: '.eq', // 筛选子元素.eq
            connectorStyle: { // 连接线样式
                stroke: 'rgb(58, 156, 143)',
                strokeWidth: 2,
                oulineStroke: 'transparent',
                outlineWidth: 4
            },
            connectionType: 'basic'
        });
        instance.makeTarget(el, {
            allowLoopback: false // 防住回路自身连接
        });
        instance.fire('jsPlumbDemoNodeAdded', el);
    }
    // 关联配置
    AssociationConfiguration() {
        $(' .leftList li').click(function() {
            $(this).addClass('gary').siblings().removeClass('gary');
        })
    }
    // 添加关联字段
    addFields(link) {
        $('.btn-add').off(); // 解除事件绑定,避免重复绑定
        $('#linkModal').off();

        // 隐藏清楚数据
        $('#linkModal').on('hidden.bs.modal', function(e) {
            $(this).removeData('bs.modal');
            $('#linkTable').html('');
        });
        // 保存后在次点击显示保存的关联结果
        $('#linkModal').on('shown.bs.modal', (e)=> {
            this.AssociationConfiguration();
            if (link && link.columns) {
                $.each(link.columns, (e, com)=> {
                    let select = $(' <select class="sourceSelect tableSelect form-control dataSourceWitch"></select>');
                    let select1 = $(' <select class="sumSelect form-control dataSourceWitch"></select>');
                    let select2 = $('<select class="targetSelect  tableSelect form-control dataSourceWitch"></select>');
                    let option, option1, option2 ;
                    let columns = Object.getOwnPropertyNames(table1Select.columns);
                    let columns2 = Object.getOwnPropertyNames(table2Select.columns);
                    let gt = ['=', '&gt;', '&lt', '&gt=', '&lt='];
                    $.each(columns, function(i, key) {
                        option = $('<option value="' + key + '">' + key + '</option> ');
                        if (com.sourceId == key) {
                            option.attr('selected', true);
                        }
                        select.append(option);
                    });
                    $.each(gt, function(i, key) {
                        option1 = $('<option value="' + i + '">' + key + '</option> ');
                        if (com.equality == i) {
                            option1.attr('selected', true);
                        }
                        select1.append(option1);
                    });
                    $.each(columns2, function(i, key) {
                        option2 = $('<option value="' + key + '">' + key + '</option> ');
                        if (com.targetId == key) {
                            option2.attr('selected', true);
                        }
                        select2.append(option2);
                    });
                    this.TemplateSelect(select, select1, select2);
                })};
        });
        $('#linkModal').modal();
    }
    // 创建select关联字段
    TemplateSelect(select, select1, select2) {

        let table = $(' <div class="row Associated"></div>');
        let left = $(' <div class="col-md-5 form-group"></div>');
        let center = $(' <div class="col-md-2 form-group"></div>');
        let right = $(' <div class="col-md-4 form-group"></div>');
        let deletes = $(' <div class="col-md-1 form-group"></div>');
        // sourceSelect

        left.append(select);
        table.append(left);
        center.append(select1);
        table.append(center);
        right.append(select2);
        table.append(right);

        deletes.append('<a href="javascript:void(0);" class="ModelRemove btn btn-default btn-xs" data-toggle="cmodal"><i class="fa fa-trash-o"></i></a>');
        table.append(deletes);
        $(' #linkTable').append(table);
        $(' .ModelRemove').on('click', function() {
            $(this).parents('.Associated').remove();
        });
    }
    // 点击进行创建select关联字段
    addSelectTable(e) {
        let option, option1, option2 ;
        let select = $(' <select class="sourceSelect tableSelect form-control dataSourceWitch"></select>');
        let select1 = $(' <select class="sumSelect form-control dataSourceWitch"></select>');
        let select2 = $('<select class="targetSelect  tableSelect form-control dataSourceWitch"></select>');
        let columns = Object.getOwnPropertyNames(table1Select.columns);
        let columns2 = Object.getOwnPropertyNames(table2Select.columns);
        // sourceSelect
        $.each(columns, function(i, key) {
            option = $('<option value="' + key + '">' + key + '</option> ');
            select.append(option);
        });
        $.each(columns2, function(i, key) {
            option2 = $('<option value="' + key + '">' + key + '</option> ');

            select2.append(option2);
        });
        option1 = $('<option value="0">=</option><option value="1">&gt;</option><option value="2">&lt;</option><option value="3">&gt;=</option><option value="4">&lt;=</option>');
        select1.append(option1);
        this.TemplateSelect(select, select1, select2);
    }
    // 点击保存储存关联字段
    addOrUpdateLink(e) {
        let equality;
        let sourceId;
        let sourceType;
        let targetType;
        let targetId;
        let sourceTypeBelong;
        let targetTypeBelong;
        let selects = $('.tableSelect');
        let link = this.findLinks(sourceTable, targetTable);
         if (link == null) {
            link = {sourceId: sourceTable, targetId: targetTable, type: linkType, columns: []};
            tableModel.links.push(link);
        }
        link.type = linkType;
        link.columns = [];
        $.each(selects, function(k, select) {
            var column = {};
            var val = $(select).find('option:selected').attr('value')
            if (k % 2 == 0) {
                sourceId = val;
                // 等式关系
                equality = $(select).parent().next().children('.sumSelect').val();
                var sourceColumns;
                var sourceTableName = link.sourceId;
                for (let i = 0;i < tableModel.model.length; i++) {
                    if (tableModel.model[i].tableName == sourceTableName) {
                        sourceColumns = tableModel.model[i].columns;
                        break;
                    }
                }
                var arr = Object.getOwnPropertyNames(sourceColumns);
                for (let i = 0;i < arr.length; i++) {
                    if (arr[i] == sourceId) {
                        sourceType = sourceColumns[sourceId];
                        break;
                    }
                }
                for (let i = 0; i < sourceColumns.length; i++) {
                    if (Object.getOwnPropertyNames(sourceColumns[i]) == sourceId) {
                        sourceType = sourceColumns[i][sourceId];
                        break;
                    }
                }

            } else {
                targetId = val;
                // 获取转换类型的SELECT 集合
                var targetTableName = link.targetId;
                var targetColumns;
                for (let i = 0; i < tableModel.model.length; i++) {
                    if (tableModel.model[i].tableName == targetTableName) {
                        targetColumns = tableModel.model[i].columns;
                        break;
                    }
                }
                var arr1 = Object.getOwnPropertyNames(targetColumns);
                for (let i = 0; i < arr1.length; i++) {
                    if (arr1[i] == targetId) {
                        targetType = targetColumns[targetId];
                        break;
                    }
                }
                for (let i in dataBaseType) {
                    var typeName = Object.getOwnPropertyNames(dataBaseType[i]);
                    var sindex = $.inArray(sourceType, dataBaseType[i][typeName]);
                    var tindex = $.inArray(targetType, dataBaseType[i][typeName]);
                    if (sindex > 0) {
                        sourceTypeBelong = typeName;
                    }
                    if (tindex > 0) {
                        targetTypeBelong = typeName;
                    }
                }

                if (sourceTypeBelong !== targetTypeBelong) {
                    return false;
                }
                column.equality = equality;
                column.sourceId = sourceId;
                column.sourceType = sourceType;
                column.targetId = targetId;
                column.targetType = targetType;
                link.columns.push(column);
                link.type = $('.gary').attr('type');
                tableModel.moveTable.map(function (data, i) {
                    if (data.Id == link.sourceTableName) {
                        link.sourceDataType = data.dataSourceType;
                        link.sourceDataSourceName = data.dataSourceName;
                    }
                    if (data.Id == link.targetTableName) {
                        link.targetDataType = data.dataSourceType;
                        link.targetDataSourceName = data.dataSourceName;
                    }
                });
            }
        });
        // 判断是否关联成功

        if (sourceTypeBelong !== targetTypeBelong) {
            var message = '保存失败，源表' + sourceId + '字段为' + sourceType + '类型，目标表' + targetId + '字段为' + targetType + '类型，' + '关联失败!';
            error(message);
            return;
        }
       this.creatSql();
        $('#linkModal').modal('hide');

    }
    // 调度策略
    strategyChange() {

        if ($(' #scheduleStrategy').val() == 'CYCLE') {
            $(' #endTime').css('display', 'block');
            $(' #cronDiv').css('display', 'block');
        } else {
            $(' #endTime').css('display', 'none');
            $(' #cronDiv').css('display', 'none');
        }
    }
    // 保存生成sql语句
    creatSql() {
        let queryType; // 查询类型：1.单库且是oracle 2.单库且是hive 3.其他单库 4.跨库查询
        let sql;
        let Libname = '';
        if (tableModel.moveTable.length <= 0) {
            tableModel.sql = '';
            return;
        }
        var dataType = tableModel.moveTable[0].dataSourceType;
        // var dataSourceName = tableModel.moveTable[0].dataSourceName;
        for (let i = 1; i < tableModel.moveTable.length; i++) {
            if (tableModel.moveTable[i].dataSourceType !== dataType) {
                queryType = 4;
                break;
            }
        }
        if (queryType !== 4) {
            if (dataType == 'oracle') {
                queryType = 1;
            } else if (dataType == 'hive') {
                queryType = 2;
            } else {
                queryType = 3;
            }
        }
        // 判断选择列是否存在
        if (tableModel.colName.length > 0) {
            if (tableModel.colNameFale.length > 0) {
                tableModel.colName.map(function(val) {
                    Libname += ' ' + val + ' ';
                })
            } else {
                  Libname = ' * ';
            }

        } else {
            Libname = ' * ';
        }
        if (queryType == 4) {
            sql = 'select * from '; // 跨库查询
        } else {
           // sql = 'DIRECT ' + dataSourceName + ' select' + Libname + 'from'; // 同源查询
            sql = ' select' + Libname + 'from'; // 同源查询
        }
        let formSql = '';
        let onSql = '';
        let gt = ['=', '>', '<', '>=', '<='];
        tableModel.links.map(function(data, i) {
            let a = data.sourceDataSourceName + '.' + data.sourceTableName;
            let b = data.sourceDataSourceName + '.' + data.targetTableName;
            // sql条件
            if (data.columns.length > 0) {
                for (let i = 0; i < data.columns.length; i++) {
                    if (data.columns.length == 1) {
                        onSql = a + '.' + data.columns[i].sourceId + gt[data.columns[i].equality] + b + '.' + data.columns[i].targetId;
                    } else {
                        let and = ' and ';
                        if (i == (data.columns.length - 1)) {
                            and = '';
                        }
                        onSql += a + '.' + data.columns[i].sourceId + gt[data.columns[i].equality] + b + '.' + data.columns[i].targetId + and;
                    }
                }
            }
            if (i == 0) {
                if (data.columns.length > 0) {
                    formSql = a + ' ' + data.type.replace('J', ' J') + ' ' + b;
                }
                sql = sql + ' ' + formSql + ' ON ' + onSql;
            } else {
                if (data.columns.length > 0) {
                    formSql = ' ' + data.type.replace('J', ' J') + ' ' + b;
                }
                sql = sql + ' ' + formSql + ' ON ' + onSql;
            }
        });
        tableModel.sql = sql;
        console.log(tableModel.sql);
    }
    // 显示结果集
    ResultSet(e) {
        e.preventDefault();
        if (tableModel.sql) {
            let sql = {
                sql: encodeSMS4(tableModel.sql, key).join(','),
                limit: 20
            };
            (async ()=>{
                let result = await dataSourceModelService.getPlanResult(sql);
                if (result) {
                    // 生成结果集
                    if (result.length > 0) {
                        let keys = [];
                        $('#dataViewListHead').empty();
                        for (let i in result[0]) {
                            $('#dataViewListHead').append(`<th>${i}</th>`);
                            keys.push(i);
                        }
                        this.createdataViewList(result, keys);
                    }
                }
                    $(' #ResultSet').modal();
            })()
        }
    }
    // 列选择
    columnSelect(e) {
        $(' #columnListBody').html(''); // 防止重复
        // 生成表名
        tableModel.moveTable.map(function(data) {
            let listDiv = $('<div class="row columListDiv"></div>');
            let columsName = Object.getOwnPropertyNames(data.columns);
            let label = '';
            /* let dataListName = $('<h4>' + data.Id + '</h4>');
            listDiv.append(dataListName);*/
            columsName.map(function(colum) {
                let val = colum + '_' + data.tableName;
                let bm = data.dataSourceType + '.' + data.Id + '.' + colum;
                label = $('<div class="col-md-3"><input type="checkbox" name="' + bm + '" checked id="' + val + '"/><label for="' + val + '">' + colum + '</label></div>');
                listDiv.append(label);
            });
            $(' #columnListBody').append(listDiv);
        });
        // 设置未被选中checked为false
        if (tableModel.colNameFale) {
            tableModel.colNameFale.map(function(data) {
                $(' #columnListBody input[name="' + data + '"]').attr('checked', false);
            });
        }
        $(' #columnList').modal();
    }
    // 选择列后保存
    colNameSave() {
        let colName = []; // 保存选中的checked；
        let colNameFale = []; // 保存未被选择中的checked
       $(' #columnListBody input:checkbox').each(function(i) {
           if ($(this).is(':checked')) {
               colName[i] = $(this).attr('name');
           } else {
               colNameFale[i] = $(this).attr('name');
           }
       });
        tableModel.colName = colName;
        tableModel.colNameFale = colNameFale;
        this.creatSql();
    }
    // 保存建模
    saveModel(e) {
        e.preventDefault();
        let admin = sessionStorage.getItem('XDataUserName');
        let time = $('#cronExpression').val(); // 时间数
        // 调度频率表达式
        let TimeUnit = $(' #TimeUnit').val(); // 时间单位
        let cronExpression;
        switch (TimeUnit) {
            case '1' : // 秒
                cronExpression = time + ' * * * * ? *';
                break;
            case '2' : // 分
                cronExpression = '0 ' + time + ' * * * ? *';
                break;
            case '3' : // 时
                cronExpression = '0 0 ' + time + ' * * ? *';
                break;
            case '4' : // 日
                cronExpression = '0 0 1 ' + time + ' * ? *';
                break;
            case '5' : // 月
                cronExpression = '0 0 1 1 ' + time + ' ? *';
                break;
            case '6' : // 年
                cronExpression = '0 0 1 1 1 ? ' + time;
                break;
        }
        let creatData = {
            modelName: $('#modelName').val(),
            owner: admin,
            description: $('#description').val(),
            scheduleStrategy: $('#scheduleStrategy').val(), // 调度策略
            startTriggerTime: this.refs.startTriggerTime.getOnceTime(), // 开始调度时间
            misfireStrategy: $('#misfireStrategy').val(), // 错过的调度执行策略
            doneOffset: $('#doneOffset').val(),  // 偏移值
            offsetColumn: $('#offsetColumn').val(), // 偏移字段
            schStatus: $('#schStatus').val(), // 调度状态
            endTriggerTime: this.refs.endTriggerTime.getOnceTime(), // 最后触发时间
            dataModelSQL: encodeSMS4(tableModel.sql, key).join(','), // sql语句
            sources: [],
            sourceTableRelation: {} // 源关系
        };
        if ($('#scheduleStrategy').val() == 'CYCLE') {
            creatData.cronExpression = cronExpression; // 调度频率
        }

        // 源表名
        let TableCol = [];
        tableModel.moveTable.map(function(move, i) {
            let off = true;
            tableModel.links.map(function(link) {
                if ((move.tableName == link.sourceId) || (move.tableName == link.targetId)) {
                   if (off) {
                       for (let key in move.columns) {
                           TableCol.push({
                               colName: key,
                               colType: move.columns[key]
                           });
                       }
                       // 源表名
                       creatData.sources.push({
                           sourceName: move.dataSourceName,  // 数据源名
                           sourceType: move.dataSourceType,  // 数据源类型，oracle/mysql/pg/gbase 8a/hive/hbase/AUS/…..
                           sourceUrl: move.connectionConfig.url,  // 数据源Url（加密传输）
                           sourceUsername: move.connectionConfig.user,  // 数据源Username（加密传输）
                           sourcePwd: move.connectionConfig.pwd,  // 数据源Pwd（加密传输）
                           sourceDB: move.dataBaseName, // 数据源数据库
                           sourceTable: [{
                               TableName: move.tableName,
                               TableCol: TableCol
                           }]
                       });
                       off = false;
                   }
                }
                creatData.sourceTableRelation.relationCount = i + 1;
            })
        });
        // 源关系
        let relation = [];
        tableModel.links.map(function(link) {
            // 关系类型
            let Join = '';
            switch (link.type) {
                case 'innerJoin':
                    Join = 'JOIN';
                    break;
                case 'LEFTJOIN':
                    Join = 'JOIN';
                    break;
                case 'rightJoin':
                    Join = 'RIGHTJOIN';
                    break;
                case 'outSideJoin':
                    Join = 'FULLJOIN';
                    break;
            }
            relation.push({
                relationType: Join,
                sourceA: link.sourceDataSourceName,
                tableA: link.sourceTableName.split('.')[0],
                colA: link.sourceId,
                sourceB: link.targetDataSourceName,
                tableB: link.targetTableName.split('.')[0],
                colB: link.targetId
            });
        });
        creatData.sourceTableRelation.relation = relation;
        console.log(creatData);
        dataSourceModelService.datamodelSave(creatData);
    }
    render() {
        let start = moment();
        let minDate = moment();
        let singleDatePicker = true;
        return <div className="box box-primary" id='dataSourceModelAdd'>
            <div className='row'>
                <div className='col-md-3'>
                    <ul id='tree'></ul>
                    <table id='tableData' className="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>表信息:</th>
                            </tr>
                        </thead>
                    </table>
                </div>
                <div className='col-md-9'>
                    <div className="jtk-demo-main">
                        <div className="jtk-demo-canvas canvas-wide flowchart-demo jtk-surface jtk-surface-nopan" id="canvas">
                        </div>
                        <button name='delete' id='delete_dom' className='btn btn-primary'>删除</button>
                    </div>
                    <div className='formSubimt'>
                        <form action="">
                            <div className='row'>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="modelName" >模型名称: </label><span className="messages"></span>
                                    <input type="text" id="modelName" maxLength={16} name="modelName" className="form-control" placeholder="请输入模型名称"/>
                                </div>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="scheduleStrategy" >调度策略: </label><span className="messages"></span>
                                    <select name='scheduleStrategy' id="scheduleStrategy" className="form-control dataSourceWitch" onChange={this.strategyChange}>
                                        <option value="ONCE">ONCE(单次)</option>
                                        <option value="CYCLE">CYCLE(循环)</option>
                                    </select>
                                </div>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="schStatus" >调度状态: </label><span className="messages"></span>
                                    <select name='schStatus' id="schStatus" className="form-control dataSourceWitch">
                                        <option value="ON">ON(是)</option>
                                        <option value="OFF">OFF(否)</option>
                                    </select>
                                </div>
                            </div>
                            <div className='row'>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="startTriggerTime" >开始时间: </label><span className="messages"></span>
                                    <DateRangePicker id="startTriggerTime" name="startTriggerTime" start = {start} minDate={minDate} singleDatePicker={singleDatePicker} ref="startTriggerTime" />
                                    {/* <input type="text" id="startTriggerTime" name="startTriggerTime" className="form-control"/> */}
                                </div>
                                <div className='col-md-4 form-group' id='endTime' style={{display: 'none'}}>
                                    <label htmlFor="endTriggerTime" >结束时间: </label><span className="messages"></span>
                                    <DateRangePicker id="endTriggerTime" name="endTriggerTime" start = {start} minDate={minDate} singleDatePicker={singleDatePicker} ref="endTriggerTime" />
                                </div>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="misfireStrategy" >错过调度策略: </label><span className="messages"></span>
                                    <select name='misfireStrategy' id="misfireStrategy" className="form-control dataSourceWitch">
                                        <option value="DO_NOTHING">不补充执行</option>
                                        <option value="FIRE_ONCE_NOW">补充执行一次</option>
                                        <option value="FIRE_ALL_MISSED">补充执行二次</option>
                                    </select>
                                </div>

                            </div>
                            <div className='row'>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="offsetColumn" >偏移字段: </label><span className="messages"></span>
                                    <select type="text" id="offsetColumn" name="offsetColumn" className="form-control select2me"/>
                                </div>
                                <div className='col-md-4 form-group'>
                                    <label htmlFor="doneOffset" >偏移量: </label><span className="messages"></span>
                                    <input type="text" id="doneOffset" maxLength={16} name="doneOffset" className="form-control"/>
                                </div>
                                <div className='col-md-4 form-group' style={{display: 'none'}} id='cronDiv'>
                                    <label htmlFor="cronExpression">调度频率: </label><span className="messages"></span>
                                    <div>
                                        <div style={{float: 'left'}}>
                                            <input type="text" id="cronExpression" name="cronExpression" className="form-control"/>
                                        </div>
                                        <div style={{float: 'left'}}>
                                            <select name="" id="TimeUnit" className="form-control dataSourceWitch">
                                                <option value="1">秒</option>
                                                <option value="2">分</option>
                                                <option value="3">时</option>
                                                <option value="4">日</option>
                                                <option value="5">月</option>
                                                <option value="6">年</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className='row'>
                                <div className='col-md-12 form-group'>
                                    <label htmlFor="description" >说明: </label><span className="messages"></span>
                                    <textarea className="form-control" id="description" name = "description" rows="4" placeholder="请输入说明" data-gramm_editor="true" style={{resize: 'none'}}>
                                    </textarea>
                                </div>
                            </div>
                            <div className='buttonModel col-md-12 form-group'>
                                <button name="Result" className="btn btn-primary" type="button" onClick={this.ResultSet}>显示结果集</button>
                                <button name="colums" className="btn btn-primary" type="button" style={{ margin: '0px 25px' }} onClick={this.columnSelect}>列选择</button>
                                <button name="saveBtn" className="btn btn-primary" type="button" onClick={this.saveModel}> 保存</button>
                            </div>
                            {/* 关联配置 */}
                            <div className='modal in' id='linkModal'>
                                <div className='modal-dialog'>
                                    <div className='modal-content'>
                                        <div className='modal-header'>
                                            <button type='button' className='close' data-dismiss='modal' aria-label='Close' onClick={this.closeModal}>
                                                <span aria-hidden='true'>×</span>
                                            </button>
                                            <h4 className='modal-title'>关联配置</h4>
                                        </div>
                                        <div className='modal-body popBody'>
                                            <ul className="changeLi leftList">
                                                <li className="gary" type="innerJoin">
                                                    <img src={require('../../assets/img/set01.png')}/>
                                                    <p>内部</p>
                                                </li>
                                                <li type="leftJoin">
                                                    <img src={require('../../assets/img/set02.png')}/>
                                                    <p>左侧</p>
                                                </li>
                                                <li type="rightJoin">
                                                    <img src={require('../../assets/img/set03.png')}/>
                                                    <p>右侧</p>
                                                </li>
                                                <li type="outSideJoin">
                                                    <img src={require('../../assets/img/set04.png')}/>
                                                    <p>完全外部</p>
                                                </li>
                                            </ul>
                                            <div className='form_table' id='linkTable'>
                                            </div>
                                            <button className='btn btn-default btn-add' type="button" onClick={this.addSelectTable}>添加关联字段</button>
                                        </div>
                                        <div className='modal-footer'>
                                            <button type='button' className='btn btn-default' data-dismiss='modal' onClick={this.closeModal}>取消</button>
                                            <button type='button' className='btn btn-primary' id='submitParam' onClick={this.addOrUpdateLink}>保存</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {/* 显示结果集 */}
                            <div className='modal in' id='ResultSet'>
                                <div className='modal-dialog'>
                                    <div className='modal-content'>
                                        <div className='modal-header'>
                                            <button type='button' className='close' data-dismiss='modal' aria-label='Close' onClick={this.closeModal}>
                                                <span aria-hidden='true'>×</span>
                                            </button>
                                            <h4 className='modal-title'>显示结果集</h4>
                                        </div>
                                        <div className='modal-body popBody'>
                                            <table id='dataViewList' className="table table-striped table-bordered">
                                                <thead>
                                                    <tr id='dataViewListHead'></tr>
                                                </thead>
                                            </table>
                                        </div>
                                        <div className='modal-footer'>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {/* 列选择 */}
                            <div className='modal in' id='columnList'>
                                <div className='modal-dialog'>
                                    <div className='modal-content'>
                                        <div className='modal-header'>
                                            <button type='button' className='close' data-dismiss='modal' aria-label='Close' onClick={this.closeModal}>
                                                <span aria-hidden='true'>×</span>
                                            </button>
                                            <h4 className='modal-title'>显示列信息</h4>
                                        </div>
                                        <div className='modal-body popBody' id='columnListBody'>

                                        </div>
                                        <div className='modal-footer'>
                                            <button type='button' className='btn btn-default' data-dismiss='modal'>取消</button>
                                            <button type='button' className='btn btn-primary' data-dismiss='modal' id='colNameSave' onClick={this.colNameSave}>保存</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
}


