/**
 *角色列表组件
 * User: jiaomx
 * Date: 2017/5/23
 * Time: 14:40
 */

import React, { Component } from 'react';
// import { unitTransform } from 'UTIL/util';
import {encodeSMS4} from 'UTIL/sm4';
import createList from 'UTIL/baseList';
import { error } from 'UTIL/notification';

class DataView extends Component {
    constructor(props) {
        super(props);
        this.createTable = this.createTable.bind(this);
        this.searchHandler = this.searchHandler.bind(this);
        this.getListHandler = this.getListHandler.bind(this);
        this.state = {
            toggle: true
        }
    }

    componentWillMount() {
        //
    }

    componentDidUpdate() {
        let data = this.props.dataView.planResult;
        if (data.length > 0) {
            let keys = [];
            // $('#dataViewList').DataTable().destroy();
            $('#dataViewListTr').empty();
            for (let i in data[0]) {
                $('#dataViewListTr').append(`<th>${i}</th>`);
                keys.push(i);
            }
            this.createTable(data, keys);
            $('#dataViewList').removeClass('hide');
        }

    }

    searchHandler () {
        let SQLWords = $('#SQLWords').val();
        if ($.trim(SQLWords)) {
            let tagObj = {
                sql: encodeSMS4(SQLWords, '2C023A86BD32812A4C180A7152EEBF0A').join(',')
            };
            this.props.getSqlResult(tagObj);
            return;
        }
        error('SQL语句不能为空！');
    }

    getListHandler () {
        let [SQLWords, limit] = [$('#SQLWords').val(), $('#limit').val()];
        if (!$.trim(SQLWords)) {
            error('SQL语句不能为空！');
            return;
        }
        if (!$.trim(limit)) {
            error('限制数不能为空且只能是数字！');
            return;
        }
        let obj = {
            sql: encodeSMS4(SQLWords, '2C023A86BD32812A4C180A7152EEBF0A').join(','),
            limit: Number(limit)
        };
        this.props.getPlanResult(obj);
    }

    createTable(data, keys) {

        // 构造列表配置项
        let tableConfig = {};
        let columns = [];
        for (let i = 0; i < keys.length; i++) {
            columns.push({data: keys[i], 'defaultContent': '-'});
        }
        tableConfig.id = 'dataViewList';
        tableConfig.columns = columns;
        tableConfig.scrollX = true;
        // tableConfig.columns = [
        //     {data: 'datasetName', 'defaultContent': '-'},
        //     {data: 'count', 'defaultContent': '-'},
        //     {
        //         data: 'size',
        //         render: function (data, type, row, meta) {
        //             return unitTransform(data);
        //         },
        //         'defaultContent': '-'
        //     },
        //     {
        //         data: 'status',
        //         render: function (data, type, row, meta) {
        //             if (data == 'ONLINIE') {
        //                 return '上线';
        //             } else {
        //                 return '下线';
        //             }
        //         },
        //         'defaultContent': '-'
        //     },
        //     {
        //         data: 'visable',
        //         render: function (data, type, row, meta) {
        //             if (data == 'PRIVATE') {
        //                 return '私有';
        //             } else {
        //                 return '共享';
        //             }
        //         },
        //         'defaultContent': '-'
        //     },
        //     {
        //         data: 'owner',
        //         'render': function (data, type, row) {
        //             let html = `<a href="javascript:void(0);" class="owner">${ row.owner }</a> `;
        //             return html;
        //         },
        //         'defaultContent': '-'},
        //     {data: 'createTime', 'defaultContent': '-'}
        // ];
        // tableConfig.order = [[6, 'desc']];
        // 获取列表内数据列
        tableConfig.data = data;
        // 生成列表
        createList(tableConfig);
    }

    toggle() {
        this.setState({
            toggle: !this.state.toggle
        })
    }

    render() {
        return (
            <div>
                <div className="box box-primary">
                    <div className="box-header">
                        <div className="col-md-12">
                            <label>输入SQL语句：</label>
                            <textarea className="form-control" id="SQLWords" rows="3" placeholder="请输入SQL语句"></textarea>
                            <div className="panel-body">
                                <div className="row">
                                    <button type="button" className="btn btn-success" onClick={this.searchHandler}>执行计划查询</button>
                                </div>
                            </div>
                            <div className={this.props.dataView.mqlResult.trim() == '' ? 'hide' : ''}>
                                <div className="box-header text-right">
                                    <h4 className="box-title">
                                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" onClick={this.toggle.bind(this)}>
                                            {this.state.toggle ? '收起' : '展开'}
                                        </a>
                                    </h4>
                                </div>
                                <div id="collapseOne" className="panel-collapse collapse in" aria-expanded="true">
                                    <div className="box-body">
                                        <pre>{ this.props.dataView.mqlResult.replace('\n', '<br/>') }</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="box-body">
                        <div className="col-md-3">
                            <input type="number" className="form-control" min="0" id="limit" defaultValue={50} placeholder="请输入限制数" />
                        </div>

                        <div className="col-md-12">
                            <div className="panel-body pull-left">
                                <div className="row">
                                    <button type="button" className="btn btn-success pull-left" onClick={this.getListHandler}>查询数据</button>
                                </div>
                            </div>
                            <div className="table-scrollable">
                                <table className="table table-striped table-bordered" id="dataViewList">
                                    <thead>
                                    <tr id="dataViewListTr"></tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        )
    }
}
export default DataView;

